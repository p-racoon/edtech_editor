{"version":3,"sources":["logo.svg","components/TopBar.js","components/Markdown.js","components/Editor.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","useState","activeItem","setActiveItem","routerHistory","useHistory","handleItemClick","e","name","push","Menu","pointing","secondary","size","Container","Item","src","Logo","alt","active","onClick","Markdown","props","escapeHtml","plugins","RemarkMathPlugin","renderers","math","value","inlineMath","_mapProps","Editor","inputText","setInputText","mainTextAreaRef","useRef","className","Grid","columns","divided","Row","Column","Form","TextArea","placeholder","ref","style","minHeight","rows","onChange","target","handleTextInputOnChange","source","About","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,4OCsC5BC,MAjCf,WAAmB,IAAD,EACsBC,mBAAS,QAD/B,mBACPC,EADO,KACKC,EADL,KAEVC,EAAgBC,cACdC,EAAkB,SAACC,EAAD,GAAkB,IAAZC,EAAW,EAAXA,KAC1B,OAAQA,GACJ,IAAK,QAASJ,EAAcK,KAAK,UAAW,MAC5C,IAAK,OACL,QAASL,EAAcK,KAAK,KAEhCN,EAAcK,IAGlB,OACI,kBAACE,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,EAACC,KAAK,SAC1B,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAKK,KAAN,KACI,yBAAKC,IAAKC,IAAMC,IAAI,gBAExB,kBAACR,EAAA,EAAKK,KAAN,CACIP,KAAK,OACLW,OAAuB,SAAfjB,EACRkB,QAASd,IAEb,kBAACI,EAAA,EAAKK,KAAN,CACIP,KAAK,QACLW,OAAuB,UAAfjB,EACRkB,QAASd,O,iFCXde,EAFE,SAACC,GAAD,OAAW,kBAAC,IAbX,SAACA,GAAD,sBACbA,EADa,CAEhBC,YAAY,EACZC,QAAS,CACPC,KAEFC,UAAU,eACLJ,EAAMI,UADF,CAEPC,KAAM,gBAAGC,EAAH,EAAGA,MAAH,OAAe,kBAAC,YAAD,KAAYA,IACjCC,WAAY,gBAAGD,EAAH,EAAGA,MAAH,OAAe,kBAAC,aAAD,KAAaA,QAIGE,CAAUR,KCgC1CS,EA9CA,WACX,IADiB,EAIiB9B,mBAAS,IAJ1B,mBAIV+B,EAJU,KAICC,EAJD,KAKXC,EAAkBC,iBAAO,MAC/B,OACI,yBAAKC,UAAU,iBACX,kBAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,SAAO,GACrB,kBAACF,EAAA,EAAKG,IAAN,KACI,kBAACH,EAAA,EAAKI,OAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,YAAY,gCACZC,IAAKX,EACLN,MAAOI,EACPc,MAAO,CAAEC,UAAW,QACpBC,KAAM,GACNC,SAAU,SAAC1C,GAAD,OAjBN,SAACA,GAC7B0B,EAAa1B,EAAE2C,OAAOtB,OAgBmBuB,CAAwB5C,QAIrD,kBAAC8B,EAAA,EAAKI,OAAN,KACI,yBAAKL,UAAU,eAWX,kBAAC,EAAD,CAAUgB,OAAQpB,U,SC5B/BqB,MARf,WACI,OACI,uCCsBOC,MAhBf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAACxC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyC,KAAK,SAASC,UAAWH,IAChC,kBAAC,IAAD,CAAOE,KAAK,IAAIC,UAAWzB,SCNnB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca600305.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport { Menu, Container } from 'semantic-ui-react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Logo from '../logo.svg';\r\n\r\nfunction TopBar() {\r\n    const [activeItem, setActiveItem] = useState('home');\r\n    let routerHistory = useHistory();\r\n    const handleItemClick = (e, { name }) => {\r\n        switch (name) {\r\n            case 'about': routerHistory.push('/about'); break;\r\n            case 'home':\r\n            default: routerHistory.push('/');\r\n        }\r\n        setActiveItem(name);\r\n    }\r\n\r\n    return (\r\n        <Menu pointing secondary size='large'>\r\n            <Container>\r\n                <Menu.Item>\r\n                    <img src={Logo} alt=\"React Logo\" />\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    name='home'\r\n                    active={activeItem === 'home'}\r\n                    onClick={handleItemClick}\r\n                />\r\n                <Menu.Item\r\n                    name='about'\r\n                    active={activeItem === 'about'}\r\n                    onClick={handleItemClick}\r\n                />\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport RemarkMathPlugin from 'remark-math';\r\nimport { BlockMath, InlineMath } from 'react-katex';\r\n\r\nconst _mapProps = (props) => ({\r\n  ...props,\r\n  escapeHtml: false,\r\n  plugins: [\r\n    RemarkMathPlugin\r\n  ],\r\n  renderers: {\r\n    ...props.renderers,\r\n    math: ({ value }) => <BlockMath>{value}</BlockMath>,\r\n    inlineMath: ({ value }) => <InlineMath>{value}</InlineMath>\r\n  }\r\n});\r\n\r\nconst Markdown = (props) => <ReactMarkdown {..._mapProps(props)} />;\r\n\r\nexport default Markdown;","import React, { useState, useRef } from 'react';\r\nimport { Form, Grid, TextArea } from 'semantic-ui-react'\r\nimport Markdown from './Markdown';\r\n\r\nconst Editor = () => {\r\n    const handleTextInputOnChange = (e) => {\r\n        setInputText(e.target.value);\r\n    }\r\n    const [inputText, setInputText] = useState('');\r\n    const mainTextAreaRef = useRef(null);\r\n    return (\r\n        <div className=\"mainContainer\" >\r\n            <Grid columns={2} divided >\r\n                <Grid.Row>\r\n                    <Grid.Column >\r\n                        <Form>\r\n                            <TextArea\r\n                                placeholder='Let the awesomeness begin ...'\r\n                                ref={mainTextAreaRef}\r\n                                value={inputText}\r\n                                style={{ minHeight: '70vh' }}\r\n                                rows={10}\r\n                                onChange={(e) => handleTextInputOnChange(e)}\r\n                            />\r\n                        </Form>\r\n                    </Grid.Column>\r\n                    <Grid.Column >\r\n                        <div className=\"previewArea\">\r\n                            {/* <Latex displayMode={true}> */}\r\n                            {/* <div\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: DOMPurify.sanitize(markdownToHtmlEngine(\r\n                                        <Latex displayMode={true}>\r\n                                            {inputText}\r\n                                        </Latex>\r\n                                    ))\r\n                                }}\r\n                            /> */}\r\n                            <Markdown source={inputText}/>\r\n                            {/* </div> */}\r\n                            {/* {inputText} */}\r\n                            {/*  */}\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            About\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\nimport { Container } from 'semantic-ui-react'\nimport './App.css';\nimport TopBar from './components/TopBar';\nimport Editor from './components/Editor';\nimport {\n  BrowserRouter as Router, Switch, Route\n} from \"react-router-dom\";\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <TopBar />\n        <Container>\n          <Switch>\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/\" component={Editor} />\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}